affinity: {}
autoscaling:
  enabled: false
  maxReplicas: 100
  minReplicas: 1
  targetCPUUtilizationPercentage: 80
fullnameOverride: testkube
image:
  pullPolicy: Never
  repository: ""
  tag: ""
imagePullSecrets: []
ingress:
  annotations: {}
  className: ""
  enabled: "false"
  hosts:
  - host: chart-example.local
    paths:
    - path: /
      pathType: ImplementationSpecific
  tls: []
mongodb:
  affinity: {}
  annotations: {}
  arbiter:
    affinity: {}
    annotations: {}
    args: []
    command: []
    configuration: ""
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    enabled: true
    existingConfigmap: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: []
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    labels: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: 1
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      sysctls: []
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources:
      limits: {}
      requests: {}
    runtimeClassName: ""
    service:
      nameOverride: ""
    sidecars: []
    tolerations: []
  architecture: standalone
  args: []
  auth:
    database: ""
    databases: []
    enabled: false
    existingSecret: ""
    password: ""
    passwords: []
    replicaSetKey: ""
    rootPassword: ""
    rootUser: root
    username: ""
    usernames: []
  clusterDomain: cluster.local
  command: []
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      namespaceOverride: ""
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  configuration: ""
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  directoryPerDB: false
  disableJavascript: false
  disableSystemLog: false
  enableIPv6: false
  enableJournal: true
  enabled: true
  existingConfigmap: ""
  externalAccess:
    autoDiscovery:
      enabled: false
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/kubectl
        tag: 1.23.3-debian-10-r1
      resources:
        limits: {}
        requests: {}
    enabled: false
    hidden:
      enabled: false
      service:
        annotations: {}
        domain: ""
        loadBalancerIPs: []
        loadBalancerSourceRanges: []
        nodePorts: []
        port: 27017
        type: LoadBalancer
    service:
      annotations: {}
      domain: ""
      loadBalancerIPs: []
      loadBalancerSourceRanges: []
      nodePorts: []
      port: 27017
      type: LoadBalancer
  extraDeploy: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  extraVolumeMounts: []
  extraVolumes: []
  fullnameOverride: testkube-mongodb
  global:
    imagePullSecrets: []
    imageRegistry: ""
    namespaceOverride: ""
    storageClass: ""
  hidden:
    affinity: {}
    annotations: {}
    args: []
    command: []
    configuration: ""
    customLivenessProbe: {}
    customReadinessProbe: {}
    enabled: false
    existingConfigmap: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: []
    extraVolumeMounts: []
    extraVolumes: []
    initContainers: []
    labels: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: 1
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      medium: ""
      mountPath: /bitnami/mongodb
      size: 8Gi
      storageClass: ""
      subPath: ""
      volumeClaimTemplates:
        dataSource: {}
        selector: {}
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: OrderedReady
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 1
    resources:
      limits: {}
      requests: {}
    runtimeClassName: ""
    sidecars: []
    strategyType: RollingUpdate
    tolerations: []
  hostAliases: []
  image:
    debug: false
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/mongodb
    tag: 4.4.12-debian-10-r7
  initContainers: []
  initdbScripts: {}
  initdbScriptsConfigMap: ""
  labels: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  metrics:
    containerPort: 9216
    enabled: false
    extraFlags: ""
    extraUri: ""
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/mongodb-exporter
      tag: 0.30.0-debian-10-r53
    livenessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 15
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    password: ""
    prometheusRule:
      additionalLabels: {}
      enabled: false
      namespace: ""
      rules: {}
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits: {}
      requests: {}
    service:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: '{{ .Values.metrics.service.port }}'
        prometheus.io/scrape: "true"
      port: 9216
      type: ClusterIP
    serviceMonitor:
      additionalLabels: {}
      enabled: false
      interval: 30s
      metricRelabelings: []
      namespace: ""
      relabellings: []
      scrapeTimeout: ""
    username: ""
  nameOverride: mongodb
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  pdb:
    create: false
    maxUnavailable: ""
    minAvailable: 1
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: true
    existingClaim: ""
    medium: ""
    mountPath: /bitnami/mongodb
    size: 8Gi
    storageClass: ""
    subPath: ""
    volumeClaimTemplates:
      dataSource: {}
      requests: {}
      selector: {}
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podManagementPolicy: OrderedReady
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    sysctls: []
  podSecurityPolicy:
    allowPrivilegeEscalation: false
    create: false
    privileged: false
    spec: {}
  priorityClassName: ""
  rbac:
    create: false
    role:
      rules: []
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 2
  replicaSetConfigurationSettings:
    configuration: {}
    enabled: false
  replicaSetHostnames: true
  replicaSetName: rs0
  resources:
    limits: {}
    requests: {}
  runtimeClassName: ""
  schedulerName: ""
  service:
    annotations: {}
    clusterIP: ""
    externalIPs: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nameOverride: ""
    nodePort: true
    port: "27017"
    portName: mongodb
    portNmae: mongodb
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: true
    name: ""
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 30
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  strategyType: RollingUpdate
  systemLogVerbosity: 0
  tls:
    autoGenerated: true
    caCert: ""
    caKey: ""
    enabled: false
    existingSecret: ""
    extraDnsNames: []
    image:
      pullPolicy: IfNotPresent
      registry: docker.io
      repository: bitnami/nginx
      tag: 1.21.6-debian-10-r0
    mode: requireTLS
  tolerations: []
  topologySpreadConstraints: []
  useStatefulSet: false
  volumePermissions:
    enabled: false
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 10-debian-10-r321
    resources:
      limits: {}
      requests: {}
    securityContext:
      runAsUser: 0
nameOverride: testkube
nodeSelector: {}
podAnnotations: {}
podSecurityContext: {}
replicaCount: 1
resources: {}
securityContext: {}
service:
  port: 80
  type: ClusterIP
serviceAccount:
  annotations: {}
  create: true
  name: ""
testkube-api:
  affinity: {}
  analyticsEnabled: true
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  cliIngress:
    annotations:
      kubernetes.io/ingress.class: contour
      ingress.kubernetes.io/force-ssl-redirect: "false"
    enabled: true
    hosts:
    - testkube.full.tapsme.org
    oauth:
      clientID: ""
      clientSecret: ""
      provider: github
      scopes: ""
    path: /results/(v\d/.*)
    tls:
    - hosts:
      - testkube.full.tapsme.org
      secretName: testkube-demo-cert-secret
    tlsenabled: "false"
  fullnameOverride: testkube-api-server
  global: {}
  image:
    pullPolicy: Always
    repository: kubeshop/testkube-api-server
  imagePullSecrets: []
  minio:
    affinity: {}
    enabled: true
    nodeSelector: {}
    serviceAccountName: ""
    tolerations: []
  mongodb:
    dsn: mongodb://testkube-mongodb:27017
  nameOverride: api-server
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  postmanExecutorURI: http://testkube-postman-executor:8082
  prometheus:
    enabled: false
  replicaCount: 1
  resources: {}
  securityContext: {}
  service:
    port: 8088
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: true
    name: ""
  slackToken: ""
  storage:
    SSL: false
    accessKey: minio123
    accessKeyId: minio
    endpoint_port: "9000"
    location: ""
    scrapperEnabled: true
    token: ""
  tolerations: []
  uiIngress:
    annotations:
      kubernetes.io/ingress.class: contour
      ingress.kubernetes.io/force-ssl-redirect: "false"
    enabled: true
    hosts:
    - testkube.full.tapsme.org
    path: /results/(v\d/executions.*)
    tls:
    - hosts:
      - testkube.full.tapsme.org
      secretName: testkube-demo-cert-secret
    tlsenabled: "false"
testkube-dashboard:
  affinity: {}
  apiServerEndpoint: default
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  enabled: true
  fullnameOverride: testkube-dashboard
  global: {}
  image:
    pullPolicy: Always
    repository: kubeshop/testkube-dashboard
  imagePullSecrets: []
  ingress:
    annotations:
      kubernetes.io/ingress.class: contour
      ingress.kubernetes.io/force-ssl-redirect: "false"
    apiServerEndpoint: ""
    enabled: "true"
    hosts:
    - testkube.full.tapsme.org
    path: /
    tls:
    - hosts:
      - testkube.full.tapsme.org
      secretName: testkube-demo-cert-secret
    tlsenabled: "false"
  nameOverride: dashboard
  nodeSelector: {}
  oauth2:
    enabled: false
    env:
      clientId: ""
      clientSecret: ""
      cookieSecret: ""
      cookieSecure: "false"
      githubOrg: ""
      redirectUrl: http://testkube.full.tapsme.org/oauth2/callback
    image:
      pullPolicy: Always
      repository: quay.io/oauth2-proxy/oauth2-proxy
      tag: latest
    name: oauth2-proxy
    path: /oauth2
    port: 4180
    selector: k8s-app
  podAnnotations: {}
  podSecurityContext: {}
  replicaCount: 1
  resources: {}
  securityContext: {}
  service:
    port: 80
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: true
    name: ""
  tolerations: []
testkube-operator:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  fullnameOverride: testkube-operator
  global: {}
  image:
    pullPolicy: Always
    repository: kubeshop/testkube-operator
    tag: 1.0.23
  imagePullSecrets: []
  ingress:
    annotations: {}
    className: ""
    enabled: false
    hosts:
    - host: chart-example.local
      paths:
      - path: /
        pathType: ImplementationSpecific
    tls: []
  nameOverride: testkube-operator
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  rbac:
    create: true
  replicaCount: 1
  resources: {}
  securityContext: {}
  service:
    port: 80
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: true
    name: ""
  tolerations: []
tolerations: []